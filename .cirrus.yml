---
# see https://potyarkin.ml/posts/2020/running-libvirt-kvm-in-cirrus-ci/
# obtained from: https://gitlab.com/sio/server_common/-/blob/master/.cirrus.yml.j2
#
# SECONDARY ENTRYPOINT FOR CONTINUOUS INTEGRATION JOBS
#
# Tests that require full virtualization are delegated to Cirrus CI.
# Jobs described in this file are triggered by executing `cirrus-run`

task:
  name: test-ansible-role-kvm
  container:
    image: potyarkin/molecule:host-kvm  # Debian 10
    kvm: true
    memory: 12G
    cpu: 4

  env:
    VAGRANT_DEFAULT_PROVIDER: libvirt
    VAGRANT_USER: vagrant
    VAGRANT_HOME: /home/${VAGRANT_USER}
    # VENVDIR must be absolute path for 'cd && make' approach to work
    # VENVDIR should not be cached! Cirrus CI drops some binaries randomly
    VENVDIR: $VAGRANT_HOME/venv
    SUDO_ENV: PATH=${PATH}:${VAGRANT_HOME}/.local/bin VENVDIR=${VAGRANT_HOME}/venv PIP_CACHE_DIR=${VAGRANT_HOME}/cache/pip VAGRANT_DEFAULT_PROVIDER=${VAGRANT_DEFAULT_PROVIDER}
    RUN_AS_VAGRANT: sudo -u ${VAGRANT_USER} env ${SUDO_ENV}

    # Force colored output
    PY_COLORS: '1'  # https://www.jeffgeerling.com/blog/2020/getting-colorized-output-molecule-and-ansible-on-github-actions-ci
    ANSIBLE_FORCE_COLOR: '1'

    # Variables that might be helpful for debugging
    DEBUG: 1
    #   DEBUG: 1
    #   VIRSH_DEBUG: 1
    #   LIBVIRT_DEBUG: 2
    #   LIBGUESTFS_DEBUG: 1
    #   LIBGUESTFS_TRACE: 1

  # CI cache
  # TODO: explore possibility of caching libvirtd image pool
  pip_cache:  # ~20 sec speedup
    folder: ${VAGRANT_HOME}/cache
    fingerprint_script:
      - echo "Python packages cache"
      - echo "$CACHE_KEY"

  # CI environment does not provide systemd,
  # we have to start the daemons manually
  iptables_legacy_script:
    - update-alternatives --set iptables /usr/sbin/iptables-legacy

  dbus_background_script:
    - mkdir -p /var/run/dbus
    - /usr/bin/dbus-daemon --system --nofork --nopidfile


  setup_packages_script:
    - apt-get --quiet --yes install wget ruby ruby-dev sudo python3-pip

    # from https://github.com/vagrant-libvirt/vagrant-libvirt
    # - apt-get build-dep vagrant ruby-libvirt
    - apt-get --quiet --yes install qemu libvirt-daemon-system bridge-utils ebtables libvirt-dev qemu-kvm qemu-utils libvirt-clients ebtables dnsmasq-base libxslt-dev libxml2-dev libvirt-dev zlib1g-dev ruby-dev
    - useradd --user-group --groups libvirt-qemu,libvirt,sudo --create-home --comment "The test user" ${VAGRANT_USER}
    - chown -R ${VAGRANT_USER}:${VAGRANT_USER} ${VAGRANT_HOME} .

  setup_vagrant_script:
    - apt-get -y remove vagrant
    - wget https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.deb
    - dpkg -i vagrant_2.2.14_x86_64.deb
    - vagrant --version
    - ${RUN_AS_VAGRANT} vagrant plugin install --debug --verbose --plugin-source https://rubygems.org/ vagrant-libvirt

  setup_qemu_script:

    # fixup qemu.conf. do not use root
    - sed -i.bak -e 's/user = "root"//g' /etc/libvirt/qemu.conf

  virtlogd_background_script:
    - /usr/sbin/virtlogd

  libvirtd_background_script:
    - sleep 2 && /usr/sbin/libvirtd 2>&1 | tee /var/log/libvirtd.log

  libvirtd_log_script:
    - sleep 10
    - cat /var/log/libvirtd.log
    - virsh net-list --all || echo "Exit code: $?"
    - ifconfig || echo "Exit code: $?"
    - cat /etc/network/interfaces || echo "Exit code: $?"
    - brctl show || echo "Exit code: $?"
    - iptables -S || echo "Exit code: $?"
    - iptables-legacy -S || echo "Exit code: $?"
    - iptables-nft -S || echo "Exit code: $?"
    - pstree -alT
    - ps -eo ppid,pid,user,cpu,rss,stat,start,command

  setup_ruby_script:
    - gem install bundler
    - ${RUN_AS_VAGRANT} bundle install --path ${VAGRANT_HOME}/.bundle

  setup_python_script:
    - ${RUN_AS_VAGRANT} pip3 install --user ansible yamllint molecule
    - ${RUN_AS_VAGRANT} ansible --version
    - ${RUN_AS_VAGRANT} yamllint --version
    - ${RUN_AS_VAGRANT} molecule --version

  # Execute automated tests
  test_script:

    # Create ansible.cfg with correct roles_path
    - mkdir -p extra_roles
    - printf '[defaults]\nstdout_callback = yaml\nroles_path=../:extra_roles' >ansible.cfg

    # Download depended roles
    - if [ -f requirements.yml ]; then ${RUN_AS_VAGRANT} ansible-galaxy install -r requirements.yml -p extra_roles; fi
    - if [ -f requirements.yml ]; then ${RUN_AS_VAGRANT} ansible-galaxy collection install -r requirements.yml -p collections; fi

    # run test
    - ${RUN_AS_VAGRANT} bundle exec kitchen list
    - ${RUN_AS_VAGRANT} bundle exec kitchen test ubuntu

  # Debugging information
  always:
    env_debug_script:
      - env | sort
      - ls -al ${VAGRANT_HOME}
    cache_debug_script:
      - find "${VAGRANT_HOME}/cache" -type f || echo "Exit code: $?"
    libvirtd_debug_script:
      - cat /var/log/libvirtd.log
    kvm_debug_script:
      - ls -al /dev/kvm
      - free -h
      - pstree -alT
      - ps -eo ppid,pid,user,cpu,rss,stat,start,command
      - lsmod
      - kvm-ok || echo "Exit code: $?"
      - ls -l /dev/kvm || echo "Exit code: $?"
      - ls -l /var/run/libvirt || echo "Exit code: $?"
      - whoami
      - groups $(whoami)
      - systemctl status || echo "Exit code: $?"
      - cat /proc/cpuinfo
      - lscpu
      - virsh capabilities
      - virt-host-validate || echo "Exit code: $?"
      - cat /sys/module/kvm_*/parameters/nested || echo "Exit code: $?"
    network_debug_script:
      - virsh net-list --all || echo "Exit code: $?"
      - virsh net-dumpxml vagrant-libvirt || echo "Exit code: $?"
      - ifconfig || echo "Exit code: $?"
      - cat /etc/network/interfaces || echo "Exit code: $?"
      - brctl show || echo "Exit code: $?"
      - iptables -S || echo "Exit code: $?"
      - iptables-legacy -S || echo "Exit code: $?"
      - iptables-nft -S || echo "Exit code: $?"
    molecule_debug_script:
      - find /root/.cache/molecule/ -type f -exec tail -v -n+0 {} \; || echo "Exit code: $?"
